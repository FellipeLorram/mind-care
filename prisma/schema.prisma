// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id          String    @id @default(uuid())
  name        String
  address     String?
  age         Int
  email       String?
  gender      String?
  observation String?
  nationality String?
  birth_date   DateTime?
  occupation  String?
  phones      Phone[]

  medical_history  String?
  medications      String?
  allergies        String?
  chronic_diseases String?

  modality         String?
  appointment_from String?
  appointment_to   String?
  appointment_day  String?

  customFields CustomField[]
  appointments Appointment[]
  user         User          @relation(fields: [user_id], references: [id])
  user_id      String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  detachedNote DetachedNote[]

  @@map("patients")
}

model Phone {
  id         String  @id @default(uuid())
  number     String
  refers_to  String
  patient    Patient @relation(fields: [patient_id], references: [id])
  patient_id String

  @@map("phones")
}

model CustomField {
  id         String  @id @default(uuid())
  name       String
  value      String
  patient    Patient @relation(fields: [patient_id], references: [id])
  patient_id String

  @@map("custom_fields")
}

model Appointment {
  id               String   @id @default(uuid())
  patient          Patient  @relation(fields: [patient_id], references: [id])
  patient_id       String
  appointment_time DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Note      Note[]

  @@map("appointments")
}

model Note {
  content        String
  id             String      @id @default(uuid())
  appointment    Appointment @relation(fields: [appointment_id], references: [id])
  appointment_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

model DetachedNote {
  content String
  id      String @id @default(uuid())

  patient    Patient @relation(fields: [patient_id], references: [id])
  patient_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("detached_notes")
}
